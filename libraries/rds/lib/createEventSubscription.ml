open Types[@@ocaml.warning "-33"]
open Aws.BaseTypes[@@ocaml.warning "-33"]
open Aws
module CreateEventSubscriptionMessage =
  struct
    type t =
      {
      subscription_name: String.t
        [@ocaml.doc
          "<p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>"];
      sns_topic_arn: String.t
        [@ocaml.doc
          "<p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>"];
      source_type: String.t option
        [@ocaml.doc
          "<p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>"];
      event_categories: EventCategoriesList.t
        [@ocaml.doc
          "<p> A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. </p>"];
      source_ids: SourceIdsList.t
        [@ocaml.doc
          "<p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>"];
      enabled: Boolean.t option
        [@ocaml.doc
          "<p> A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. </p>"];
      tags: TagList.t }[@@ocaml.doc "<p/>"]
    let make ~subscription_name  ~sns_topic_arn  ?source_type 
      ?(event_categories= [])  ?(source_ids= [])  ?enabled  ?(tags= [])  () =
      {
        subscription_name;
        sns_topic_arn;
        source_type;
        event_categories;
        source_ids;
        enabled;
        tags
      }
    let to_query v = Query.List (Util.list_filter_opt [])
    let to_headers v = Headers.List (Util.list_filter_opt [])
    let to_json v =
      `Assoc
        (Util.list_filter_opt
           [Some ("tags", (TagList.to_json v.tags));
           Util.option_map v.enabled
             (fun f -> ("enabled", (Boolean.to_json f)));
           Some ("source_ids", (SourceIdsList.to_json v.source_ids));
           Some
             ("event_categories",
               (EventCategoriesList.to_json v.event_categories));
           Util.option_map v.source_type
             (fun f -> ("source_type", (String.to_json f)));
           Some ("sns_topic_arn", (String.to_json v.sns_topic_arn));
           Some ("subscription_name", (String.to_json v.subscription_name))])
    let parse xml =
      Some
        {
          subscription_name =
            (Xml.required "SubscriptionName"
               (Util.option_bind (Xml.member "SubscriptionName" xml)
                  String.parse));
          sns_topic_arn =
            (Xml.required "SnsTopicArn"
               (Util.option_bind (Xml.member "SnsTopicArn" xml) String.parse));
          source_type =
            (Util.option_bind (Xml.member "SourceType" xml) String.parse);
          event_categories =
            (Util.of_option []
               (Util.option_bind (Xml.member "EventCategories" xml)
                  EventCategoriesList.parse));
          source_ids =
            (Util.of_option []
               (Util.option_bind (Xml.member "SourceIds" xml)
                  SourceIdsList.parse));
          enabled =
            (Util.option_bind (Xml.member "Enabled" xml) Boolean.parse);
          tags =
            (Util.of_option []
               (Util.option_bind (Xml.member "Tags" xml) TagList.parse))
        }
    let to_xml v =
      Util.list_filter_opt
        ((((((([] @
                 [Some
                    (Ezxmlm.make_tag "SubscriptionName"
                       ([], (String.to_xml v.subscription_name)))])
                @
                [Some
                   (Ezxmlm.make_tag "SnsTopicArn"
                      ([], (String.to_xml v.sns_topic_arn)))])
               @
               [Util.option_map v.source_type
                  (fun f ->
                     Ezxmlm.make_tag "SourceType" ([], (String.to_xml f)))])
              @
              (List.map
                 (fun x ->
                    Some
                      (Ezxmlm.make_tag "EventCategories"
                         ([], (EventCategoriesList.to_xml [x]))))
                 v.event_categories))
             @
             (List.map
                (fun x ->
                   Some
                     (Ezxmlm.make_tag "SourceIds"
                        ([], (SourceIdsList.to_xml [x])))) v.source_ids))
            @
            [Util.option_map v.enabled
               (fun f -> Ezxmlm.make_tag "Enabled" ([], (Boolean.to_xml f)))])
           @
           (List.map
              (fun x ->
                 Some (Ezxmlm.make_tag "Tags" ([], (TagList.to_xml [x]))))
              v.tags))
  end[@@ocaml.doc "<p/>"]
module CreateEventSubscriptionResult = CreateEventSubscriptionResult
type input = CreateEventSubscriptionMessage.t
type output = CreateEventSubscriptionResult.t
type error = Errors_internal.t
let streaming = false
let service = "rds"
let to_http service region req =
  let uri =
    Uri.add_query_params
      (Uri.of_string
         ((Aws.Util.of_option_exn (Endpoints.url_of service region)) ^ "/"))
      (List.append
         [("Version", ["2014-10-31"]);
         ("Action", ["CreateEventSubscription"])]
         (Util.drop_empty
            (Uri.query_of_encoded
               (Query.render (CreateEventSubscriptionMessage.to_query req))))) in
  (`POST, uri,
    (Headers.render (CreateEventSubscriptionMessage.to_headers req)), "")
let of_http headers
  (body : [ `String of string  | `Streaming of Piaf.Body.t ]) =
  let ((`String body) : [ `String of string  | `Streaming of Piaf.Body.t ]) =
    body[@@ocaml.warning "-8"] in
  try
    let xml = Ezxmlm.from_string body in
    let resp =
      Util.option_bind
        (Xml.member "CreateEventSubscriptionResponse" (snd xml))
        (Xml.member "CreateEventSubscriptionResult") in
    try
      let open Error in
        Util.or_error
          (Util.option_bind resp CreateEventSubscriptionResult.parse)
          (BadResponse
             {
               body;
               message =
                 "Could not find well formed CreateEventSubscriptionResult."
             })
    with
    | Xml.RequiredFieldMissing msg ->
        let open Error in
          `Error
            (BadResponse
               {
                 body;
                 message =
                   ("Error parsing CreateEventSubscriptionResult - missing field in body or children: "
                      ^ msg)
               })
  with
  | Failure msg ->
      let open Error in
        `Error
          (BadResponse { body; message = ("Error parsing xml: " ^ msg) })
let parse_error code err =
  let errors = [] @ Errors_internal.common in
  match Errors_internal.of_string err with
  | Some v ->
      if
        (List.mem v errors) &&
          ((match Errors_internal.to_http_code v with
            | Some x -> x = code
            | None -> true))
      then Some v
      else None
  | None -> None